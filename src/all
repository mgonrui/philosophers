#include "philo.h"

bool is_digit(char c)
{
	if (c >= '0' && c <= '9')
		return true;
	return false;
}

long ft_mini_atol(char *str)
{
	long result;
	int	 i;

	result = 0;
	i = 0;
	while (is_digit(str[i]) && str[i] != '\0')
	{
		result *= 10;
		result += str[i] - '0';
		i++;
	}
	return result;
}

int check_input(int argc, char **argv)
{
	int i = 1;
	int j = 0;
	if (argc != 5 && argc != 6)
	{
		print_error("Wrong number of arguments\n", 2);
		return 1;
	}
	while (argv[i] != NULL)
	{
		j = 0;
		while (argv[i][j] != '\0')
		{
			if (is_digit(argv[i][j]) == false || ft_mini_atol(argv[i]) == 0)
			{
				print_error("Arguments must be integers greater than zero\n", 2);
				return 1;
			}
			j++;
		}
		i++;
	}
	return 0;
}
#include "philo.h"

void init_program_data(t_program_data *program_data, char **argv)
{
	program_data->start_time = time_current();
	program_data->someone_died = false;
	program_data->nphilos = ft_mini_atol(argv[1]);
	program_data->time_to_die = ft_mini_atol(argv[2]);
	program_data->time_to_eat = ft_mini_atol(argv[3]);
	program_data->time_to_sleep = ft_mini_atol(argv[4]);
	if (argv[5] != NULL)
		program_data->max_nmeals = ft_mini_atol(argv[5]);
	else
		program_data->max_nmeals = -1;
	if (pthread_mutex_init(&program_data->read, NULL) != 0)
	{
		print_error("error initing mutex", 3);
		return;
	}
	if (pthread_mutex_init(&program_data->write, NULL))
	{
		print_error("error initing mutex", 3);
		return;
	}
	return;
}

int init_philos(t_program_data *program_data)
{
	int i;

	i = 0;
	program_data->philos = malloc(program_data->nphilos * sizeof(t_philo *));
	if (program_data->philos == NULL)
		return (print_error("No memory left to alloc", 2));
	while (i < program_data->nphilos)
	{
		program_data->philos[i] = malloc(sizeof(t_philo));
		if (program_data->philos[i] == NULL)
			return (print_error("No memory left to alloc", 2));
		program_data->philos[i]->id = i + 1;
		program_data->philos[i]->nmeals_eaten = 0;
		program_data->philos[i]->last_meal_time = time_current();
		program_data->philos[i]->data = program_data;
		if (pthread_mutex_init(&program_data->philos[i]->mutex, NULL))
			return (print_error("Failed to init mutex", 2));
		i++;
	}
	return 0;
}

int init_forks(t_program_data *program_data)
{
	int i;

	program_data->forks = malloc(program_data->nphilos * sizeof(pthread_mutex_t));
	if (program_data->forks == NULL)
		return (print_error("No memory left to alloc", 2));
	i = 0;
	while (i < program_data->nphilos)
	{
		if (pthread_mutex_init(&program_data->forks[i], NULL))
			return (print_error("Could not create fork mutex", 3));
		program_data->philos[i]->l_fork = &program_data->forks[i];
		if (i == program_data->nphilos - 1)
			program_data->philos[i]->r_fork = &program_data->forks[0];
		else
			program_data->philos[i]->r_fork = &program_data->forks[i + 1];

		i++;
	}
	return 0;
}

int start_philo_threads(t_program_data *data)
{
	int i;

	i = 0;
	while (i < data->nphilos)
	{
		if (pthread_create(&data->philos[i]->thread, NULL, &philo_actions, data->philos[i]))
			return 1;
		i++;
	}
	return 0;
}
#include "philo.h"
#include <stdlib.h>

static void ft_thread_join(t_program_data *data)
{
	int i;

	i = 0;
	while (i < data->nphilos)
	{
		pthread_join(data->philos[i]->thread, NULL);
		i++;
	}
}

int main(int argc, char **argv)
{
	t_program_data data;

	if (check_input(argc, argv))
		return 1;
	init_program_data(&data, argv);
	if (init_philos(&data) != 0)
	{
		print_error("error initing philos", 2);
		return 1;
	}
	if (init_forks(&data) != 0)
	{
		print_error("error initing forks", 2);
		return 1;
	}
	if (has_someone_died(&data) == false)
	{
		start_philo_threads(&data);
		loop(&data);
	}
	usleep(100);
	ft_thread_join(&data);
	// t_philosopher philos[MAX_NPHILOS];
	// pthread_mutex_t forks[MAX_NPHILOS];
	// program_data = malloc(sizeof(t_program_data));
	// init_program(program_data, argc, argv);
	// init_forks(program_data, forks);
	return 0;
}
#include "philo.h"
#include <unistd.h>

void print_action(t_philo *philo, t_actions action)
{
	pthread_mutex_lock(&philo->data->read);
	pthread_mutex_lock(&philo->data->write);
	if (action == DIE)
	{
		philo->data->someone_died = true;
		printf("%ld %d died\n", time_passed(philo->data->start_time), philo->id);
	}
	else if (action == GRAB_FORK)
		printf("%ld %d has taken a fork\n", time_passed(philo->data->start_time), philo->id);
	else if (action == EAT)
		printf("%ld %d is eating\n", time_passed(philo->data->start_time), philo->id);
	else if (action == THINK)
		printf("%ld %d is thinking\n", time_passed(philo->data->start_time), philo->id);
	else if (action == SLEEP)
		printf("%ld %d is sleeping\n", time_passed(philo->data->start_time), philo->id);
	pthread_mutex_unlock(&philo->data->read);
	pthread_mutex_unlock(&philo->data->write);
}

void ft_grab_forks(t_philo *p)
{
	if (p->id % 2 == 0)
	{
		pthread_mutex_lock(p->r_fork);
		print_action(p, GRAB_FORK);
		pthread_mutex_lock(p->l_fork);
		print_action(p, GRAB_FORK);
	}
	else
	{
		pthread_mutex_lock(p->l_fork);
		print_action(p, GRAB_FORK);
		pthread_mutex_lock(p->r_fork);
		print_action(p, GRAB_FORK);
	}
}

void action_eat(t_philo *philo)
{
	ft_grab_forks(philo);
	print_action(philo, EAT);
	pthread_mutex_lock(&philo->mutex);
	philo->last_meal_time = time_current();
	philo->nmeals_eaten++;
	pthread_mutex_unlock(&philo->mutex);
	my_usleep(philo->data->time_to_eat);
	pthread_mutex_unlock(philo->r_fork);
	pthread_mutex_unlock(philo->l_fork);
}

void action_sleep(t_philo *philo)
{
	print_action(philo, SLEEP);
	my_usleep(philo->data->time_to_sleep);
}

void action_think(t_philo *philo)
{
	print_action(philo, THINK);
	my_usleep(TIME_TO_THINK);
}

void *philo_actions(void *vphilo)
{
	t_philo *philo;

	philo = vphilo;
	if (philo->id % 2 == 0)
		my_usleep(10);
	if (philo->data->nphilos == 1)
	{
		print_action(philo, GRAB_FORK);
		my_usleep(philo->data->time_to_die);
		return (NULL);
	}
	while (has_someone_died(philo->data) == false)
	{
		if (has_someone_died(philo->data) == false)
			action_eat(philo);
		if (has_someone_died(philo->data) == false)
			action_sleep(philo);
		if (has_someone_died(philo->data) == false)
			action_think(philo);
	}
	return NULL;
}
#include "philo.h"

int has_someone_died(t_program_data *data)
{
	pthread_mutex_lock(&data->read);
	if (data->someone_died == true)
	{
		pthread_mutex_unlock(&data->read);
		return 1;
	}
	pthread_mutex_unlock(&data->read);
	return 0;
}

static bool is_philo_dead(t_philo *philo)
{
	pthread_mutex_lock(&philo->mutex);
	if (time_passed(philo->data->start_time) - philo->last_meal_time > philo->data->time_to_die)
	{
		pthread_mutex_unlock(&philo->mutex);
		pthread_mutex_lock(&philo->data->read);
		philo->data->someone_died = true;
		pthread_mutex_unlock(&philo->data->read);
		print_action(philo, DIE);
		return true;
	}
	pthread_mutex_unlock(&philo->mutex);
	return false;
}

void loop(t_program_data *data)
{
	while (true)
	{
		if (checker_philos(data) == true)
			break;
	}
}

bool checker_philos(t_program_data *data)
{
	bool end_program;
	int	 i;

	end_program = 1;
	i = 0;

	while (i < data->nphilos)
	{
		if (is_philo_dead(data->philos[i]) == true)
			return true;
		pthread_mutex_lock(&data->read);
		if (data->philos[i]->nmeals_eaten < data->max_nmeals || data->max_nmeals == -1)
			end_program = false;
		pthread_mutex_unlock(&data->read);
		i++;
	}
	if (end_program == true)
	{
		pthread_mutex_lock(&data->read);
		data->someone_died = true;
		pthread_mutex_unlock(&data->read);
	}
	return end_program;
}
#include "philo.h"
#include <sys/time.h>

long time_current(void)
{
	struct timeval time;

	if (gettimeofday(&time, NULL) == -1)
		print_error("gettimeofday function error\n", 3);
	return (time.tv_sec * 1000 + time.tv_usec / 1000);
}

int my_usleep(size_t milisec)
{
	size_t start;

	start = time_current();
	while ((time_current() - start) < milisec)
		usleep(1);
	return (0);
}

long time_passed(long start_time)
{
	long time_passed;
	time_passed = time_current() - start_time;
	return time_passed;
}
#include "philo.h"

int print_error(char *str, int errorcode)
{
	int i;
	i = 0;
	write(2, "Error: ", 8);
	while (str[i] != '\0')
		write(2, &str[i++], 1);
	return (errorcode);
}
#ifndef PHILOSOPHERS_H
#define PHILOSOPHERS_H

#include <limits.h>
#include <pthread.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <unistd.h>

#define MAX_NPHILOS 200
#define TIME_TO_THINK 2

typedef enum e_actions
{
	GRAB_FORK,
	EAT,
	THINK,
	SLEEP,
	DIE,
} t_actions;

typedef struct s_program_data
{
	struct s_philo **philos;
	bool			 someone_died;
	long			 nphilos;
	long			 start_time;
	long			 time_to_die;
	long			 time_to_sleep;
	long			 time_to_eat;
	long			 max_nmeals;
	pthread_mutex_t *forks;
	pthread_mutex_t	 read;
	pthread_mutex_t	 write;
} t_program_data;

typedef struct s_philo
{
	t_program_data	*data;
	unsigned int	 id;
	bool			 is_dead;
	unsigned int	 last_meal_time;
	unsigned int	 nmeals_eaten;
	pthread_t		 thread;
	pthread_mutex_t *r_fork;
	pthread_mutex_t *l_fork;
	pthread_mutex_t	 mutex;
} t_philo;

// check user input
int	 check_input(int argc, char **argv);
long ft_mini_atol(char *str);

// utils
int	 print_error(char *str, int errorcode);
long get_current_time(void);
long time_current(void);
long time_passed(long start_time);
int	 my_usleep(size_t milisec);

// main
void init_program_data(t_program_data *program_data, char **argv);
int	 init_forks(t_program_data *program_data);
int	 init_philos(t_program_data *program_data);
int	 start_philo_threads(t_program_data *data);

// program_stats_checking
int	 has_someone_died(t_program_data *data);
bool checker_philos(t_program_data *data);
void loop(t_program_data *data);

// philo_actions
void *philo_actions(void *vphilo);
void  action_eat(t_philo *philo);
void  action_sleep(t_philo *philo);
void  action_think(t_philo *philo);
void  print_action(t_philo *philo, t_actions action);
#endif // PHILOSOPHERS_H
